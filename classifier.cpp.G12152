#include "classifier.h"
#include "ui_classifier.h"

Classifier::Classifier(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::Classifier)
{
    ui->setupUi(this);

    view = new Qt3DExtras::Qt3DWindow();
    view->defaultFrameGraph()->setClearColor(QColor(QRgb(0x4d4d4f)));
    container = this->createWindowContainer(view);
    QSize screenSize = view->screen()->size();
    container->setMinimumSize(QSize(200, 100));
    container->setMaximumSize(screenSize);

    ui->verticalLayout->addWidget(container);

    Qt3DInput::QInputAspect *input = new Qt3DInput::QInputAspect;
    view->registerAspect(input);

    // Set up the scene and specify its root entity
    Qt3DCore::QEntity *rootEntity = new Qt3DCore::QEntity();

    // Camera
    Qt3DRender::QCamera *cameraEntity = view->camera();

    cameraEntity->lens()->setPerspectiveProjection(45.0f, 16.0f/9.0f, 0.1f, 1000.0f);
    cameraEntity->setPosition(QVector3D(0, 0, 20.0f));
    cameraEntity->setUpVector(QVector3D(0, 1, 0));
    cameraEntity->setViewCenter(QVector3D(0, 0, 0));

    //Create a light with some intensity and place as the position of the camera
    Qt3DCore::QEntity *lightEntity = new Qt3DCore::QEntity(rootEntity);
    Qt3DRender::QPointLight *light = new Qt3DRender::QPointLight(lightEntity);
    light->setColor("white");
    light->setIntensity(1);
    lightEntity->addComponent(light);
    Qt3DCore::QTransform *lightTransform = new Qt3DCore::QTransform(lightEntity);
    lightTransform->setTranslation(cameraEntity->position());
    lightEntity->addComponent(lightTransform);

    // The root entity is just an empty shell and its behavior is defined by the components
    //that it references.

    //Create the cylinder, first the geometric properties
    Qt3DExtras::QCylinderMesh *cylinder = new Qt3DExtras::QCylinderMesh();
    cylinder->setRadius(1);
    cylinder->setLength(3);
    cylinder->setRings(100);
    cylinder->setSlices(20);

    // Then create a transformation that will be applied to the cylinder
    cylinderTransform = new Qt3DCore::QTransform();
    cylinderTransform->setScale(1.5f);
    cylinderTransform->setRotation(QQuaternion::fromAxisAndAngle(QVector3D(1.0f, 0.0f, 0.0f), 45.0f));
    cylinderTransform->setTranslation(QVector3D(0.0f, 0.0f, 0.0f));

    //Apply the material to the cylider
    Qt3DExtras::QPhongMaterial *cylinderMaterial = new Qt3DExtras::QPhongMaterial();
    cylinderMaterial->setDiffuse(QColor(Qt::GlobalColor::red ));

    // Put everything together. This variable is created from the rootEntity and
    // it will contain the geometrical mesh, the material and it will keep track
    // of the movements by means of cylinderTransform

    m_cylinderEntity = new Qt3DCore::QEntity(rootEntity);
    m_cylinderEntity->addComponent(cylinder);
    m_cylinderEntity->addComponent(cylinderMaterial);
    m_cylinderEntity->addComponent(cylinderTransform);

    //Let the cylinder be visible
    m_cylinderEntity->setEnabled(true);

    //Create three axes x,y,z that won't change. I use very thin and long cylinders for that.
    Qt3DExtras::QCylinderMesh *xmesh = new Qt3DExtras::QCylinderMesh();
    xmesh->setRadius(0.05);
    xmesh->setLength(10);
    xmesh->setRings(100);
    xmesh->setSlices(20);

    Qt3DExtras::QCylinderMesh *ymesh = new Qt3DExtras::QCylinderMesh();
    ymesh->setRadius(0.05);
    ymesh->setLength(10);
    ymesh->setRings(100);
    ymesh->setSlices(20);

    Qt3DExtras::QCylinderMesh *zmesh = new Qt3DExtras::QCylinderMesh();
    zmesh->setRadius(0.05);
    zmesh->setLength(10);
    zmesh->setRings(100);
    zmesh->setSlices(20);

    Qt3DExtras::QPhongMaterial *xmaterial = new Qt3DExtras::QPhongMaterial();
    xmaterial->setDiffuse(QColor(Qt::GlobalColor::black ));

    Qt3DExtras::QPhongMaterial *ymaterial = new Qt3DExtras::QPhongMaterial();
    ymaterial->setDiffuse(QColor(Qt::GlobalColor::blue ));

    Qt3DExtras::QPhongMaterial *zmaterial = new Qt3DExtras::QPhongMaterial();
    zmaterial->setDiffuse(QColor(Qt::GlobalColor::green ));

    //Set a transformation to orient the axis and never change anymore
    xtransform = new Qt3DCore::QTransform();
    xtransform->setScale(1.5f);
    xtransform->setTranslation(QVector3D(0.0f, 0.0f, 0.0f));
    xtransform->setRotation(QQuaternion::fromAxisAndAngle(QVector3D(1.0f, 0.0f, 0.0f), 45.0f));
    QMatrix4x4 Xmatrix = xtransform->matrix();
    //Xmatrix.setToIdentity();
    Xmatrix.rotate(90.0f,QVector3D(1.0f, 0.0f, 0.0f));
    xtransform->setMatrix(Xmatrix);

    ytransform = new Qt3DCore::QTransform();
    ytransform->setScale(1.5f);
    ytransform->setTranslation(QVector3D(0.0f, 0.0f, 0.0f));
    ytransform->setRotation(QQuaternion::fromAxisAndAngle(QVector3D(1.0f, 0.0f, 0.0f), 45.0f));
    QMatrix4x4 Ymatrix = ytransform->matrix();
    //Ymatrix.setToIdentity();
    Ymatrix.rotate(90.0f,QVector3D(0.0f, 1.0f, 0.0f));
    ytransform->setMatrix(Ymatrix);

    ztransform = new Qt3DCore::QTransform();
    ztransform->setScale(1.5f);
    ztransform->setTranslation(QVector3D(0.0f, 0.0f, 0.0f));
    ztransform->setRotation(QQuaternion::fromAxisAndAngle(QVector3D(1.0f, 0.0f, 0.0f), 45.0f));
    QMatrix4x4 Zmatrix = ztransform->matrix();
    //Zmatrix.setToIdentity();
    Zmatrix.rotate(90.0f,QVector3D(0.0f, 0.0f, 1.0f));
    ztransform->setMatrix(Zmatrix);

    //Put everything together and make xyz appear on the scene
    //x:
    x = new Qt3DCore::QEntity(rootEntity);
    x->addComponent(xmesh);
    x->addComponent(xmaterial);
    x->addComponent(xtransform);
    //y:
    y = new Qt3DCore::QEntity(rootEntity);
    y->addComponent(ymesh);
    y->addComponent(ymaterial);
    y->addComponent(ytransform);
    //z:
    z = new Qt3DCore::QEntity(rootEntity);
    z->addComponent(zmesh);
    z->addComponent(zmaterial);
    z->addComponent(ztransform);


    //Put everything we have created on the scene
    view->setRootEntity(rootEntity);


    show();


}

Classifier::~Classifier()
{
    delete ui;
}

void Classifier::transform(float angle, QVector3D &axis, QString msg)
{
    if(msg == "successive"){
        m_matrix = cylinderTransform->matrix();
    }
    if(msg == "absolute"){
        m_matrix.setToIdentity();
    }
    m_matrix.rotate(angle, axis);
    cylinderTransform->setMatrix(m_matrix);


}



//void Classifier::setRoll(float angle)
//{
//    QVector3D tempAxis(0.0f,1.0f,0.0f);
//    cylinderTransform->setRotation(QQuaternion::fromAxisAndAngle(tempAxis, angle));
//    m_cylinderEntity->addComponent(cylinderTransform);
//}

//void Classifier::setPitch(float angle)
//{
//    QVector3D tempAxis(0.0f,0.0f,1.0f);
//    cylinderTransform->setRotation(QQuaternion::fromAxisAndAngle(tempAxis, angle));
//    m_cylinderEntity->addComponent(cylinderTransform);
//}

//void Classifier::setYaw(float angle)
//{
//    QVector3D tempAxis(1.0f,0.0f,0.0f);
//    cylinderTransform->setRotation(QQuaternion::fromAxisAndAngle(tempAxis, angle));
//    m_cylinderEntity->addComponent(cylinderTransform);
//}

//void Classifier::setCylinderTranslation(QVector3D &t)
//{
//    cylinderTransform->setTranslation(t);
//    m_cylinderEntity->addComponent(cylinderTransform);

//}

